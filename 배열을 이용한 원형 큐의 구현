#include<stdlib.h>
#include <stdio.h>
#define MAX_Q_SIZE 5
typedef int element;
typedef struct{
	int rear;
	int front;
	element data[MAX_Q_SIZE];
}Queue;

void initQueue(Queue* q){ // 저장 위치가 되어야 함. -1되면 안됨
	q->front = 0;
	q->rear = 0;
	//front, rear 초기화
	
}
int isEmpty(Queue* q){
	 return (q->rear == q->front); // 비어있는 상태
}
int isFull(Queue* q){
	return (q->rear+1) % MAX_Q_SIZE == q->front; // 돌고 돌아서 인덱스 시작 값까지 갔다
}
void enQueue(Queue* q, element item){
	if (isFull(q)) printf("큐가 포화상태입니다.\n");
	else{
		q->rear = (q->rear + 1) % MAX_Q_SIZE; // 1.화살표 제일 먼저, 2. 더하기, 3. 나누기
		q->data[q->rear] = item;
	}//코드작성
}
element deQueue(Queue* q){
	if(isEmpty(q)) printf("큐는 공백상태입니다.\n");
	else{
		q->front = (q->front+1) % MAX_Q_SIZE;
		return q->data[q->front];
	}//코드작성
	

}
void printQueue(Queue* q){
	int i;
	printf("QUEUE(front=%d rear=%d) = ",q->front, q->rear);
	if (isEmpty(q)) {
		printf("큐는 공백상태입니다.\n");
		return;
	}
	 i = q->front; // front는 데이터가 없는 자리, 데이터 시작하는 앞의 자리
	do{
		i = (i+1)% (MAX_Q_SIZE);
		printf("%d | ",q->data[i]);
		if(i == q->rear) break;
	}while(i!=q->front);
	printf("\n");
}

int main() {
	Queue q;
	element item;
	initQueue(&q);
	printf("--데이터 추가 단계--\n");
	while (!isFull(&q)){
		printf("정수를 입력하시오.");
		scanf("%d",&item);
		enQueue(&q,item);
		printQueue(&q);
	}
	printf("큐는 포화상태입니다.\n\n");
	printf("--데이터 삭제 단계--\n");
	while(!isEmpty(&q)){
		item = deQueue(&q);
		printf("꺼내진 정수 : %d\n",item);
		printQueue(&q);
	}
	printf("큐는 공백상태입니다.\n\n");
	
	return 0;
}
