1. 포인터의 개념
- 대상의 주소를 통해 대상을 가리키는 지시자
- 주소를 나타내는 자료 또는 그러한 자료형
- 포인터가 가리키는 데이터의 자료형 정보, 즉 참조 자료형 정보도 가지고 있음

1) 포인터 변수 선언
예) int* a; // a는 int형 포인터 변수이다. 자료형* 로 꼭 사용하자.

2) 포인터 연산자
- & : Address of - 참조 연산자, 대상의 주소를 얻어 오는 연산자
예) a = &b; //  변수 b의 주소를 포인터 변수 a에 저장
- * : 역참조 연산자. 주소로부터 대상 변수값을 얻어오는 연산자
예) int c = *a; // 변수 c는 포인터 변수 a가 가리키는 주소 (b의 주소)가 가리키는 // 값을 의미

3) 포인터 변수는 힙 영역에 접근하는 동적 변수이다.

4) 메모리 영역
1. 코드 영역 : 실행할 프로그램의 코드를 저장.
2. 데이터 영역 : 전역 변수와 정적 변수를 저장.
3. 힙 영역 : 필요에 의해 동적으로 할당되는 영역.
4. 스택 영역 : 함수의 매개 변수와 지역 변수를 저장.

2. 포인터와 배열
1) 개념
배열을 포인터 변수에 저장한 후, 포인터를 이용하여 배열의 요소에 접근할 수 있다.
int a[5];
int* b;
b = a; // 배열 a의 시작 주소인 a[0]의 주소를 포인터 변수 b에 저장
- 배열의 이름 : 배열의 첫번째 요소의 주소
- 배열 요소에 대한 주소를 지정할 때는 일반 변수와 동일하게 &연산자를 사용한다.
b = &a; // 배열 a의 세 번째 요소인 a[2]의 주소를 포인터 변수 b에 저장한다.
- 배열의 요소가 포인터인 포인터형 배열을 선언할 수 있다.

- 포인터 변수에 대한 덧셈, 뺄셈 연산
- 포인터 변수에 대해 정수 변수와 유사하게 +,-,++,-- 연산 가능
- 정수 변수와 달리 실제 더해지거나 빼지는 값은 포인터 변수가 참조하는 자료형의 크기에 따라 달라짐

2) 배열의 이름과 주소
- 배열의 이름은 배열의 시작 주소를 나타내는 포인터/주소 상수
- 배열이름은 상수이므로 값을 변경할 수 없음(증감(++,--)연산 불가) a = a+1, a= a-1 불가
- 배열 이름은 포인터이므로 + 연산이 가능(연산결과 저장은 안됨) 예) a+1, a+2...
- 배열 매개변수
-배열을 매개변수로 사용하려면 () (괄호) 안에서 매개변수 이름 뒤에 [] (대괄호)를 붙이거나 매개변수를 포인터로 지정
예) void f(int arr[] 또는 int* a)
