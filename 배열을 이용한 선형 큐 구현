// 삽입은 큐의 뒷부분인 rear에서만 일어나고, 삭제는 큐의 앞부분인 front에서 일어난다
#include <stdio.h>
#include <stdlib.h>
#define MAX_Q_SIZE 5
typedef int element;
typedef struct {
	int front;
	int rear;
	element data[MAX_Q_SIZE];
}Queue;//Queue 구조체 정의
// 밑에는 오류 함수이다.
void error(char* message){ // error가 떴을 때
	printf("%s\n",message);
	exit(0);//메인함수 종료 // 0이라면 성공, 1이라면 에러⭐
}
// 공백 상태 검출 함수
void initQueue(Queue* q){ 
	 q -> front = -1; // 선형 큐는 front와 rear 값이 계속 증가하게 되면 배열의 앞부분이 비어있어도 사용할 수가 없고 앞부분이 비었을 때 앞으로 땡겨야하는데 그 비용이 크다
	// 따라서 front와 rear의 개념을 약간 변경한 게 원형 큐이다
	// front : 첫번째 요소 하나 앞의 인덱스
	// rear : 마지막 요소의 인덱스
	// 또한 원형 큐의 MAX SIZE까지 data를 다 쓴다면 공백상태인 empty와 포화상태인 full을 구분할 수 없다
	// 따라서 별도로 data를 몇 개 넣었는지 셀 수 있는 변수인 count 변수를 생성하거나 MAX SIZE -1 까지 data를 쓰면 해결된다
	q -> rear = -1; 
} // 양 끝, 먼저 들어간 애가 가장 먼저 나오는 FIFO 리스트이다!!
// 포화 상태 검출 함수
int isFull(Queue* q){
	// if (q -> rear == MAX_Q_SIZE-1) -> 끝까지 찼다라는 뜻 (if문 활용)
	return q -> rear == MAX_Q_SIZE-1;
}
// 공백 상태 검출 함수
int isEmpty(Queue* q){
 return q -> rear == q -> front; // 큐의 공백 조건 ⭐
}
// 삽입 함수
void enQueue(Queue* q,element item){ // 큐 안에 데이터를 집어 넣는 연산
 if (isFull(q)) {
	 error("Queue is Full\n");
 }
	q -> rear++;
	q -> data[q -> rear] = item;
}
// 삭제 함수
element deQueue(Queue* q){ // 큐 안의 데이터를 끄집어 내는 연산
	if (isEmpty(q)) {
	 error("Queue is Empty\n");
	}
	q -> front++;
	return q -> data[q -> front];
}
void queuePrint(Queue* q){
	int i;
	for(i=0; i<MAX_Q_SIZE; i++){
		if (i<=q->front || i > q->rear){
			printf(" | ");
		}
		else{
			printf("%d | ",q->data[i]);
		}
	}
	printf("\n");
}
int main() {
	element item = 0;
	Queue q;
	initQueue(&q);
	enQueue(&q,10); queuePrint(&q); // 10넣고 출력
	enQueue(&q,20); queuePrint(&q); // 20넣고 출력
	enQueue(&q,30); queuePrint(&q); // 30 넣고 출력
	item = deQueue(&q); queuePrint(&q); // 하나씩 뺌
	item = deQueue(&q); queuePrint(&q); // 하나씩 뺌
	return 0;
}
