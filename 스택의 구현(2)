#include <stdio.h>
#include <stdlib.h>
#define STACK_SIZE 10
typedef int element;
typedef struct {
	element data[STACK_SIZE]; // int data[10]이라는 뜻!
	int top;
}Stack;
int isFull( Stack *s );
int isEmpty( Stack *s );
void push( Stack *s, element data );
int pop( Stack *s );
void initStack(Stack *s );

int main(){
	int menu;
	element data ;
	STACK s;
	initStack(&s);
	do{
		printf("1:push, 2:pop, 0:exit : ");
		scanf("%d", &menu);
		switch( menu ){
			case 1 :
				printf("데이터 입력 : ");
				scanf("%d", &data);//입력 
				push(&s, data);//스택에 입력 // 포인터 == 주소
				break;
			case 2 :
        data = pop(&s);//스택에서 출력
        if( data )
				  printf("pop 데이터 : %d\n", data);
				break;
      case 0 :
        break;
			default :
				printf("잘못된 입력 입니다. \n");
				break;
		}
	}while( menu );
}
int isFull( Stack *s );
int isEmpty( Stack *s );
void push( Stack *s, element data );
int pop( Stack *s );
void createStack( &stack );
void initStack( STACK *s ){  // top 포인터를 -1로 초기화
	s->top = -1;
}
int isFull( Stack *s ){   // 스택이 가득 차 있으면 true 리턴
	if (s->top == STACK_SIZE) return 1; // return 1 == true를 리턴한다
	else return 0;
	// return s->top == STACK_SIZE-1; 이렇게도 표현 가능!!⭐
}
int isEmpty( Stack *s ){   // 스택이 비어 있으면 true 리턴
	return s->top == -1;
}
void Push( Stack *s, element item ){ //스택이 가득 차 있으면 문구 출력 후 리턴, 아니면 push
	if (isFull(s) ) {
		printf("스택이 가득 찼습니다.\n");
		return 0;
	}// exit(0)을 하면 프로그램이 종료된다. return 0과 동일
	s->data[s->top] = item;
}
element Pop( Stack *s ){  //스택이 비어  있으면 문구 출력 후 0 리턴, 아니면 맨 위 데이터 리턴
	element temp;
	if (isEmpty(s) ) {
		printf("스택이 비었습니다.\n");
		return 0;
	}
	temp = s->data[s->top];
	top--;
	return temp;
}
