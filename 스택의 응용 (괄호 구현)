// 책 꼭 보기 !!!!!!!!!!!!1⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
#include <stdio.h>
#include <stdlib.h>
#define STACK_SIZE 20
typedef char element;
typedef struct {
	element data[STACK_SIZE];
	int top;
}Stack;
//스택 구조체 정의

int checkTest(char expr[]); // 괄호 테스트 함수
void initStack( Stack *s );
int isFull( Stack *s );
int isEmpty( Stack *s );
void push( Stack *s, element data );
element pop( Stack *s );

int main(){
	int i;
	Stack s;
	char expr[20];
	
	printf("괄호포함 수식 입력 : ");
	scanf("%s", expr); // 문자열 입력
	if (checkTest(expr)) printf("성공"); // 만약 괄호가 expr 문자열 안에 있다면 "성공"
	else printf("실패"); // 아니라면 실패 출력
	return 0;
	
}
void initStack( Stack *s ){ // 스택을 초기화하는 함수이다. 스택에 아무 data가 없을 때를 초기화 해줘야 한다
	// 여기서 한가지 약속을 해야 한다. 스택의 현위치를 어떻게 결정할 것인가.
	// 두 가지 경우가 있다
	// 첫째, 갯수로 현위치를 이용할 것인지
	// 둘째, 마지막 데이터가 들어있는 배열의 위치를 이용할 것인지
	// 후자를 선택한다면
	// 배열의 시작 "0"보다 1 작은 "-1"을 데이터가 없는 것으로 하겠다
	
	s->top == -1;//초기화코드
}
int isFull( Stack *s ){
	return s->top == STACK_SIZE-1;
	//코드작성
}
int isEmpty( Stack *s ){
	return s->top == -1; //코드작성
}
void push( Stack *s, element c ){
	if(isFull(s)){
		printf("stack is full\n");
		return ;
	}
	s->data[++s->top] = c;
	//push 코드작성
}// 데이터 삭제
element pop( Stack *s ){
	if(isEmpty(s)){
		printf("stack is empty\n");
		return 0 ;
	}
	return s->data[s->top--]; // top만 감소
	//pop 코드작성
	// top--를 한 이유는 top는 삭제되기 전 데이터가 있는 자리이기 때문이다
	// 풀어서 쓰면
	// int data = stack[top]
	// return data;
	
}
int checkTest(char expr[]){
	int i;
	Stack s;
	initStack(&s);
	char ch,open_ch;
  for(i=0;expr[i]!='\0';i++){
		ch = expr[i]; // {(A + B)*C}/D
		//코드작성
		
		// 만약 여는 괄호라면 push
		// 만약 닫는 괄호라면 pop
		// pop == expr[i] -> 종류가 같으면 여는 괄호이면 !!
		// 위의 값을 open_ch에 넣어놓는다
		switch(ch){
			case '(': 
			case '[':
			case '{':
			push(&s, ch); //코드작성
				break;
			case ')':
			case ']':
			case '}':	
				if (isEmpty(&s)) return 0;
				open_ch = pop(&s); //코드작성
				if ((open_ch == '(' && ch != ')') || // '(' != ')' 라면
					  (open_ch == '[' && ch != ']') || // '[' != ']'
					  (open_ch == '{' && ch != '}') ) { // '{' != '}'라면
					return 0;
				}
				//printf("open_ch=%c\n",open_ch);
				break;
		}
	}
	if (isEmpty(&s)) return 0;
	return 1;
}
